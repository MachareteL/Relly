// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
    id        String   @id @default(uuid())
    userId    String
    content   String
    createdAt DateTime @default(now())

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    rellies Rellies[]

    @@unique([createdAt, id])
    @@index([userId])
}

model Rellies {
    userId  String
    postId  String
    ammount Int?   @default(1)

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    coverPhoto    String?
    accounts      Account[]
    sessions      Session[]

    posts          Post[]
    followedBy     Follows[] @relation("following")
    following      Follows[] @relation("follower")
    rellies        Rellies[]
    relliesAmmount Int       @default(100)
}

model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
